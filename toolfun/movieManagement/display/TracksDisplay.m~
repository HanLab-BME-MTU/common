classdef TracksDisplay < MovieDataDisplay
    %Conrete class for displaying flow
    properties
        Linestyle='-';
        GapLinestyle='--';
        Color='r';  
        dragtailLength=10;
        showLabel=false;
    end
    methods
        function obj=TracksDisplay(varargin)
            nVarargin = numel(varargin);
            if nVarargin > 1 && mod(nVarargin,2)==0
                for i=1 : 2 : nVarargin-1
                    obj.(varargin{i}) = varargin{i+1};
                end
            end
        end
        function h=initDraw(obj, tracks, tag, varargin)
                        
            % Get track length and filter valid tracks
            trackLengths = cellfun(@numel,{tracks.xCoord});
            validTracks = find(trackLengths>0);
            tracks = tracks(validTracks);
            trackLengths = trackLengths(validTracks);
            
            nTracks = numel(validTracks);
            h=-ones(nTracks,3);

            % Concatenate data in a matrix of size dragtailLength x nTracks
            xData = NaN(obj.dragtailLength, nTracks);
            yData = NaN(obj.dragtailLength, nTracks);
            for i = 1 : nTracks
                displayLength = trackLengths(i) - max(0,trackLengths(i)-obj.dragtailLength);
                xData(1:displayLength, i) = tracks(i).xCoord(end-displayLength+1:end);
                yData(1:displayLength, i) = tracks(i).yCoord(end-displayLength+1:end);
            end
            
            % Initialize matrix for gaps
            xGapData = NaN(size(xData));
            yGapData = NaN(size(xData));
            
            % Label gaps: series of NaNs not-connected to the border
            I = isnan(xData);
            I = [I; zeros(size(I))];
            I = reshape(I, size(I,1)/2, size(I,2)*2);
            I = bwlabel(imclearborder(I));
            I = I(:, 1:2:end);
            
            % Fill gaps x and y data
            for i = unique(nonzeros(I))'
               iFirst = find(I == i, 1, 'first')-1;
               iLast = find(I == i, 1, 'last')+1;
               xGapData(iFirst:iLast) = linspace(xData(iFirst), xData(iLast), iLast - iFirst +1);
               yGapData(iFirst:iLast) = linspace(yData(iFirst), yData(iLast), iLast - iFirst +1);
            end

            % Plot tracks
            if isfield(tracks,'label') % If track is classified
                nColors = size(obj.Color,1);
                for i = unique([tracks.label]),
                    index = [tracks.label] == i;
                    iColor = mod(i,nColors)+1;
                    h(index,1)=plot(xData(:,index),yData(:,index),'Linestyle',obj.Linestyle,...
                        'Color',obj.Color(iColor,:),varargin{:});
                    h(index,1)=plot(xGapData(:,index),yGapData(:,index),'Linestyle',obj.GapLinestyle,...
                        'Color',obj.Color(iColor,:),varargin{:});
                end
            else
                % Plot links and gaps
                h(:,1) = plot(xData, yData, 'Linestyle', obj.Linestyle,...
                    'Color',obj.Color,varargin{:});
                h(:,2) = plot(xGapData, yGapData, 'Linestyle', obj.GapLinestyle',...
                    'Color',obj.Color, varargin{:});
            end
            
            % Display track numbers if option is selected
            if obj.showLabel
                for i = find(~all(isnan(xData),1))
                    % Find last non-NaN coordinate
                    index = find(~isnan(xData(:,i)),1,'last');
                    if isfield(tracks,'label')
                        iColor = mod(tracks(i).label, nColors) + 1;
                        h(i,3) = text(xData(index,i)+2, yData(index,i)+2, num2str(i),...
                            'Color', obj.Color(iColor,:));
                    else
                        h(i,3) = text(xData(index,i)+2, yData(index,i)+2, num2str(i),...
                            'Color', obj.Color);
                    end
                end
            end
            
            % Set tag
            set(h(ishandle(h)), 'Tag', tag);
           
        end

        function updateDraw(obj, h, data)
            tag=get(h(1),'Tag');
            delete(h);
            obj.initDraw(data,tag);
            return;

        end
    end    
    
    methods (Static)
        function params=getParamValidators()
            params(1).name='Color';
            params(1).validator=@(x)ischar(x) ||isvector(x);
            params(2).name='Linestyle';
            params(2).validator=@ischar;
            params(3).name='GapLinestyle';
            params(3).validator=@ischar;
            params(4).name='dragtailLength';
            params(4).validator=@isscalar;
            params(5).name='showLabel';
            params(5).validator=@isscalar;
        end

        function f=getDataValidator() 
            f=@isstruct;
        end
    end    
end